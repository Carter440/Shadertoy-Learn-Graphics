//Carter S. Jan 2020
//Basic Raymarch of a Jack
//Based on https://www.shadertoy.com/view/tdXGWr


//from the Sphere example
float distance_from_sphere(in vec3 p, in vec3 c, float r)
{
    return length(p - c) - r;
}

// Most Shadertoy users use these sd functions to define implicit volumes
// I typically prefer more descriptive names in educational code but
// IQ's code is so widely used on the site that I'm going to begin using functions here and there
// http://iquilezles.org/www/articles/distfunctions/distfunctions.htm
float dot2(in vec3 v ) { return dot(v,v); }
float sdRoundCone(vec3 p, vec3 a, vec3 b, float r1, float r2)
{
    // sampling independent computations (only depend on shape)
    vec3  ba = b - a;
    float l2 = dot(ba,ba);
    float rr = r1 - r2;
    float a2 = l2 - rr*rr;
    float il2 = 1.0/l2;
    
    // sampling dependant computations
    vec3 pa = p - a;
    float y = dot(pa,ba);
    float z = y - l2;
    float x2 = dot2( pa*l2 - ba*y );
    float y2 = y*y*l2;
    float z2 = z*z*l2;

    // single square root!
    float k = sign(rr)*rr*rr*x2;
    if( sign(z)*a2*z2 > k ) return  sqrt(x2 + z2)        *il2 - r2;
    if( sign(y)*a2*y2 < k ) return  sqrt(x2 + y2)        *il2 - r1;
                            return (sqrt(x2*a2*il2)+y*rr)*il2 - r1;
}


//This function grows with more objects and operations (unions, distortions, perturbations, ect)
//This is usually where acceleration structures and ad hoc hackery goes down
float map_the_world(in vec3 p)
{
    float jack_dist = sdRoundCone(p, vec3(0.0,0.0,0.0), vec3(0.4,0.0,0.0), 0.1, 0.05 );
	jack_dist = min(jack_dist,sdRoundCone(p, vec3(0.0,0.0,0.0), vec3(-0.4,0.0,0.0), 0.1, 0.05 ));
    jack_dist = min(jack_dist,sdRoundCone(p, vec3(0.0,0.0,0.0), vec3(0.0,0.4,0.0), 0.1, 0.05 ));
    jack_dist = min(jack_dist,sdRoundCone(p, vec3(0.0,0.0,0.0), vec3(0.0,-0.4,0.0), 0.1, 0.05 ));
    jack_dist = min(jack_dist,sdRoundCone(p, vec3(0.0,0.0,0.0), vec3(0.0,0.0,0.4), 0.1, 0.05 ));
    jack_dist = min(jack_dist,sdRoundCone(p, vec3(0.0,0.0,0.0), vec3(0.0,0.0,-0.4), 0.1, 0.05 ));
    jack_dist = min(jack_dist,distance_from_sphere(p,vec3(0.4,0.0,0.0),0.1));
    jack_dist = min(jack_dist,distance_from_sphere(p,vec3(-0.4,0.0,0.0),0.1));
    jack_dist = min(jack_dist,distance_from_sphere(p,vec3(0.0,0.0,0.4),0.1));
    jack_dist = min(jack_dist,distance_from_sphere(p,vec3(0.0,0.0,-0.4),0.1));
    
    
    
    return jack_dist;
}


//Find the normal of the surface at this point P
vec3 calculate_normal( in vec3 pos )
{
    vec2 e = vec2(1.0,-1.0)*0.5773;
    const float eps = 0.0005;
    return normalize( e.xyy*map_the_world( pos + e.xyy ) + 
					  e.yyx*map_the_world( pos + e.yyx ) + 
					  e.yxy*map_the_world( pos + e.yxy ) + 
					  e.xxx*map_the_world( pos + e.xxx ) );  
}

void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
    //the bulk of this comes from https://www.shadertoy.com/view/tdXGWr
    //Ive removed the Anti-Aliasing for simplicity and performance
    
    // camera movement	
	float an = 0.5*(iTime-10.0);
	vec3 ray_origin = vec3( 1.0*cos(an), 0.4, 1.0*sin(an) );
    vec3 origin = vec3( 0.0, 0.0, 0.0 );
    // camera matrix (for ease of animation)
    vec3 ww = normalize( origin - ray_origin );
    vec3 uu = normalize( cross(ww,vec3(0.0,1.0,0.0) ) );
    vec3 vv = normalize( cross(uu,ww));

    
    //initialize color
    vec3 total = vec3(0.0);
    
 	//what pixel are we marching through
    vec2 p = (-iResolution.xy + 2.0*fragCoord)/iResolution.y;


	// create view ray
    vec3 ray_direction = normalize( p.x*uu + p.y*vv + 1.5*ww );

    // raymarch
    const float tmax = 2.0; //max march depth
    float t = 0.0;//current depth
    for( int i=0; i<256; i++ )
    {
        vec3 pos = ray_origin + t*ray_direction;
        //get dist to nearest surface
        float h = map_the_world(pos);
        //if we hit something break
        if( h<0.0001 || t>tmax ) break;
        //step forward
        t += h;
    }
        
    
     // ambient + diffuse light color calculations
     vec3 color = vec3(0.0);
     if( t<tmax )
     {
        vec3 pos = ray_origin + t*ray_direction;
        vec3 normal = calculate_normal(pos);
        float diffuse = clamp( dot(normal,ray_origin + vec3(0.2,0.0,0.0)), 0.0, 1.0 );
        float ambient = 0.7 + 0.5*dot(normal,vec3(1.0,1.0,0.0));
        color = vec3(0.2,0.3,0.4)*ambient + vec3(0.8,0.7,0.5)*diffuse*0.5;
     }

     // gamma color calculation    
     color = sqrt( color );
	 total += color;

	 fragColor = vec4( total, 1.0 );
}