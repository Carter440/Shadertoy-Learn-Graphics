//Carter S. Feb 2020
//Basic Raymarch of a Water Drop using smooth min, reflections, refractions, and specularity.


//from the Sphere example
float distance_from_sphere(in vec3 p, in vec3 c, float r)
{
    return length(p - c) - r;
}

//Cubic smooth minimum union function from user TinyTexel
float sminCubic( float a, float b, float k )
{
    float h = max( k-abs(a-b), 0.0 )/k;
    return min( a, b ) - h*h*h*k*(1.0/6.0);
}

//Get the Specular value (shine)
float calculate_specular(in vec3 rayd, in vec3 normal, in vec3 toLight) {
    //specular exponent
    float shinnyness = 5.0;
    //get the reflected light vector
    vec3 reflected = 2.0*dot(toLight, normal)*normal - toLight;
    //calculate specular value
    return max(0.0,pow(dot(rayd,reflected),shinnyness));
}


//This function grows with more objects and operations (unions, distortions, perturbations, ect)
//This is usually where acceleration structures and ad hoc hackery goes down
float map_the_world(in vec3 p)
{
    //chained smoothed min spheres to make a drop shape
    float drop_dist = distance_from_sphere(p, vec3(0.0,-0.2,0.0), 0.3 );
    drop_dist = sminCubic(drop_dist, distance_from_sphere(p, vec3(0.0,0.0,0.0), 0.17 ), 0.1);
    drop_dist = sminCubic(drop_dist, distance_from_sphere(p, vec3(0.0,0.1,0.0), 0.12 ), 0.1);
    drop_dist = sminCubic(drop_dist, distance_from_sphere(p, vec3(0.0,0.2,0.0), 0.08 ), 0.1);
    drop_dist = sminCubic(drop_dist, distance_from_sphere(p, vec3(0.0,0.3,0.0), 0.05 ), 0.1);
    drop_dist = sminCubic(drop_dist, distance_from_sphere(p, vec3(0.0,0.375,0.0), 0.035 ), 0.1);
    return drop_dist;
}


//Find the normal of the surface at this point P
vec3 calculate_normal( in vec3 pos )
{
    vec2 e = vec2(1.0,-1.0)*0.5773;
    const float eps = 0.0005;
    return normalize( e.xyy*map_the_world( pos + e.xyy ) + 
					  e.yyx*map_the_world( pos + e.yyx ) + 
					  e.yxy*map_the_world( pos + e.yxy ) + 
					  e.xxx*map_the_world( pos + e.xxx ) );  
}

float march_ray(vec3 ray_origin, vec3 ray_direction, float tmax) {
	float t = 0.0;//current depth
    for( int i=0; i<256; i++ )
    {
        vec3 pos = ray_origin + t*ray_direction;
        //get dist to nearest surface
        float h = map_the_world(pos);
        //if we hit something break
        if( h<0.0001 || t>tmax ) return t;
        //step forward
        t += h;
    }
    return t;
}

void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
    //the bulk of this comes from https://www.shadertoy.com/view/tdXGWr
    //Ive removed the Anti-Aliasing for simplicity and performance
    
    // camera movement	
	float an = 0.5*(iTime-10.0);
	vec3 ray_origin = vec3( 1.0*cos(an), 0.4, 1.0*sin(an) );
    vec3 origin = vec3( 0.0, 0.0, 0.0 );
    // camera matrix (for ease of animation)
    vec3 ww = normalize( origin - ray_origin );
    vec3 uu = normalize( cross(ww,vec3(0.0,1.0,0.0) ) );
    vec3 vv = normalize( cross(uu,ww));

    
    //initialize color
    vec3 total = vec3(0.0);
    
 	//what pixel are we marching through
    vec2 p = (-iResolution.xy + 2.0*fragCoord)/iResolution.y;


	// create view ray
    vec3 ray_direction = normalize( p.x*uu + p.y*vv + 1.5*ww );

    // raymarch
    const float tmax = 2.0; //max march depth
	float t = march_ray(ray_origin, ray_direction, tmax);
        
    
    
     vec3 color = vec3(0.0);
     if( t<tmax )
     {
        //where did it hit?
        vec3 pos = ray_origin + t*ray_direction;
        vec3 normal = calculate_normal(pos);
        //get diffuse and specular at this point
        float diffuse = clamp( dot(normal,vec3(0.5,1.0,0.0)), 0.0, 1.0 );
        float specular = calculate_specular(ray_direction, normal,pos - vec3(0.5,1.0,0.0));
         
        //get reflection
        vec3 reflect_direction = reflect(ray_direction, normal);
         
        //pow function is for color corretion/balancing
        vec3 reflect_color = pow(texture(iChannel0, reflect_direction).rgb, vec3(2.2));
		//get reflract direction to prep for next ray
        vec3 refract_direction = normalize(refract(ray_direction, normal, 1.000293/1.333));
        t = march_ray(pos + 0.01*refract_direction, refract_direction, 2.0);
        //light diffuse color

         
        //init refract color 
        vec3 refract_color = vec3(0.0);
        if(t<tmax){
            //hit within the drop
        	pos = pos + 0.01*refract_direction + t*refract_direction;
        	normal = calculate_normal(pos);
            //second refraction (other side of volume)
            refract_direction = normalize(refract(refract_direction, normal, 1.333/1.000293));
            refract_color = pow(texture(iChannel0, refract_direction).rgb, vec3(2.2));
        }else{
            //should never trigger but hey
            refract_color = pow(texture(iChannel0, refract_direction).rgb, vec3(2.2));
        }
        //combine reflections, refractions ect...
        color = refract_color + reflect_color*0.3 + diffuse*vec3(1.0)*0.01 + specular*vec3(1.0);
     } else {
        //ray missed drop
     	color =  pow(texture(iChannel0, ray_direction).rgb, vec3(2.2));
     }

     // gamma color calculation    
     color = sqrt( color );
	 total += color;

	 fragColor = vec4( total, 1.0 );
}