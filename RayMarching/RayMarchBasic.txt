//Carter S. Jan 2020
//Basic Raymarch of two spheres
//Based on the blog post by Michael Walczyk http://www.michaelwalczyk.com/blog/2017/5/25/ray-marching

//Simplest light source
struct PointLight {
    vec3 position;
    vec4 color;
};


float distance_from_sphere(in vec3 p, in vec3 c, float r)
{
    return length(p - c) - r;
}


//This function grows with more objects and operations (unions, distortions, perturbations, ect)
//This is usually where acceleration structures and ad hoc hackery goes down
float map_the_world(in vec3 p)
{
    float sphere_0 = distance_from_sphere(p, vec3(-2.0,0.0,0.0), 1.0);
    float sphere_1 = distance_from_sphere(p, vec3(2.0,1.0,0.0), 2.0);

    
    return min(sphere_0,sphere_1);
}


//Find the normal of the surface at this point P
vec3 calculate_normal( in vec3 pos )
{
    vec2 e = vec2(1.0,-1.0)*0.5773*0.0005;
    return normalize( e.xyy*map_the_world( pos + e.xyy ) + 
					  e.yyx*map_the_world( pos + e.yyx ) + 
					  e.yxy*map_the_world( pos + e.yxy ) + 
					  e.xxx*map_the_world( pos + e.xxx ) );  
}


//Get the Diffuse color (Basic light effect)
vec4 calculateDiffuse(in vec3 normal, in vec3 toLight, in PointLight light) {
    return light.color * max(0.0,dot(normal,toLight));
}

//Main Loop
vec4 ray_march(in vec3 ro, in vec3 rd)
{
    float total_distance_traveled = 0.0;
    const int NUMBER_OF_STEPS = 32; //set bounds on runtime
    const float MINIMUM_HIT_DISTANCE = 0.001; // front culling
    const float MAXIMUM_TRACE_DISTANCE = 1000.0; //back culling

    for (int i = 0; i < NUMBER_OF_STEPS; ++i)
    {
        //March one step
        vec3 current_position = ro + total_distance_traveled * rd;

        //Get distance to nearest surface
        float distance_to_closest = map_the_world(current_position);

        //Check if we are on/in a surface
        if (distance_to_closest < MINIMUM_HIT_DISTANCE) 
        {//if we are calculate the color of the surface
            //get normal
            vec3 normal = calculate_normal(current_position);
            //set the light
            PointLight light = PointLight(vec3(3.0,-2.0,0.0), vec4(1.0,0.0,0.0,1.0));
            vec3 direction_to_light = normalize(current_position - light.position);
			//calculate diffuse
            return calculateDiffuse(normal, direction_to_light, light);
        }
		
        //exit condition
        if (total_distance_traveled > MAXIMUM_TRACE_DISTANCE)
        {
            break;
        }
        total_distance_traveled += distance_to_closest;
    }
    return vec4(0.5,0.5,0.5,1.0);
}

void mainImage( out vec4 fragColor, in vec2 fragCoord )
{

    vec2 uv = fragCoord.xy/iResolution.xy * 2.0 - 1.0;
    uv.x *= (iResolution.x/iResolution.y);

    vec3 camera_position = vec3(0.0, 0.0, -5.0);
    vec3 ro = camera_position;
    vec3 rd = vec3(uv.x,uv.y, 1.0);

    fragColor = ray_march(ro, rd);
}