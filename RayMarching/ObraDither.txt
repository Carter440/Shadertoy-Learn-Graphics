//Carter S. Jan 2020
//Basic Raymarch with a dithering effect to show basis of most basic "toon" shaders


//from the Sphere example
float distance_from_sphere(in vec3 p, in vec3 c, float r)
{
    return length(p - c) - r;
}


//This function grows with more objects and operations (unions, distortions, perturbations, ect)
//This is usually where acceleration structures and ad hoc hackery goes down
float map_the_world(in vec3 p)
{//this one is simple since there is only 1 sdf to check
    float obj_dist = distance_from_sphere(p, vec3(0.0,0.0,0.0), 0.3);

    return obj_dist;
}


//Find the normal of the surface at this point P
vec3 calculate_normal( in vec3 pos )
{
    vec2 e = vec2(1.0,-1.0)*0.5773;
    const float eps = 0.0005;
    //take small steps to find normal
    return normalize( e.xyy*map_the_world( pos + e.xyy ) + 
					  e.yyx*map_the_world( pos + e.yyx ) + 
					  e.yxy*map_the_world( pos + e.yxy ) + 
					  e.xxx*map_the_world( pos + e.xxx ) );  
}

//macintosh-like toon dithering
//Note AA will break dithering
float calculate_dither(vec3 normal, vec3 light_direction, vec2 frag){
    //constants for dither thresholds (play with these values)
    float quarter_dither = 0.6;
    float half_dither = 0.3;
    float full_dither = -0.1;
    
    //get integer pixel coords
    int x = int(frag.x);
    int y = int(frag.y);
    //similar to diffuse calculations
	float ang = dot(normal,light_direction);
    
    //series of threshold checks
    if (ang > full_dither) {
        //get checkered coords
        int rx = x % 2;
        int ry = y % 2;
        if (ang > half_dither){
            if (ang > quarter_dither){
            	return 1.0;
            }
        	if (rx == 1 && ry == 1){//1 in 4 pixels passes this check
        		return 0.0;
        	}
        	return 1.0;
        }
        if (rx == ry){//1 in 2 pixels passes this check
        	return 0.0;
        }
        return 1.0;
    }
    return 0.0;
}

void mainImage( out vec4 fragColor, in vec2 fragCoord )
{ 
    // camera movement from https://www.shadertoy.com/view/tdXGWr
	float an = 0.5*(iTime-10.0);
	vec3 ray_origin = vec3( 1.0*cos(an), 0.4, 1.0*sin(an) );
    vec3 origin = vec3( 0.0, 0.0, 0.0 );
    // camera matrix (for ease of animation)
    vec3 ww = normalize( origin - ray_origin );
    vec3 uu = normalize( cross(ww,vec3(0.0,1.0,0.0) ) );
    vec3 vv = normalize( cross(uu,ww));

    
    //initialize color (background)
    vec3 total = vec3(0.25);
    
 	//what pixel are we marching through
    vec2 p = (-iResolution.xy + 2.0*fragCoord)/iResolution.y;


	// create view ray
    vec3 ray_direction = normalize( p.x*uu + p.y*vv + 1.5*ww );

    // raymarch
    const float tmax = 2.0; //max march depth
    float t = 0.0;//current depth
    for( int i=0; i<256; i++ )
    {
        vec3 pos = ray_origin + t*ray_direction;
        //get dist to nearest surface
        float h = map_the_world(pos);
        //if we hit something break
        if( h<0.0001 || t>tmax ) break;
        //step forward
        t += h;
    }
        
    
     // ambient + diffuse light color calculations
     vec3 color = vec3(0.0);
     if( t<tmax )
     {
        //postion of intersect
        vec3 pos = ray_origin + t*ray_direction;
        //normal at surface
        vec3 normal = calculate_normal(pos);
        // dither value
        float dither = calculate_dither(normal,normalize(vec3(0.5,0.5,0.5)-pos),fragCoord);
        //ambient sphere value
        float ambient = 0.1;
        //combine it all
        color = 0.25*vec3(0.2,0.3,0.4)*ambient + 0.75*vec3(0.8,0.7,0.5)*dither;
     }

     // gamma color calculation    
     color = sqrt( color );
	 total += color;

	 fragColor = vec4( total, 1.0 );
}