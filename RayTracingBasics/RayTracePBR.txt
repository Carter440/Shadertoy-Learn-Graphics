//Carter S. Feb 2020
//Physically Based Raytrace of a sphere
//Based on https://www.shadertoy.com/view/XlKSDR

#define PI 3.14159265359

//Raytrace hit struct
struct Hit {
	vec3 pos;
    vec3 normal;
    float mat;
};
   
//ray struct
struct Ray {
	vec3 origin;
    vec3 direction;
};

struct Sphere {
	vec3 center;  // Center of the Sphere
	float radius; // Radius of the Sphere
    float mat;
};
    
struct Plane {
	vec3 normal; //Normal vector
    vec3 point; //Some point such that for all points p in the plane dot((p-point),normal) == 0
	float mat;
};

    
    
// From the Wikipedia page on Line-Plane intersection
float intersect_plane(in Ray ray, in Plane plane) {
	float denominator = dot(ray.direction,plane.normal);
    if(abs(denominator) >= 0.01) {//make sure Ray is not parallel to plane (or nearly parallel)
        return dot((plane.point - ray.origin),plane.normal)/denominator;
    }
	return -1.0; // Any negative number to indicate no intersect (or intersection from behind)
}

// From the Wikipedia page on Line-sphere intersection
float intersect_sphere(in Ray ray, in Sphere sphere) {
	// Sphere center to ray origin
	vec3 co = ray.origin - sphere.center;

	// The discriminant is negative for a miss, or a postive value
	// used to calcluate the distance from the ray origin to point of intersection
    //bear in mind that there may be more than one solution
	float discriminant = dot(co, ray.direction) * dot(co, ray.direction)
			- (dot(co, co) - sphere.radius * sphere.radius);

	// If answer is not negative, get ray intersection depth
	if (discriminant >= 0.0)
		return -dot(ray.direction, co) - sqrt(discriminant);
	else
		return -1.; // Any negative number to indicate no intersect
}

//Get the sphere surface normal from the intersection point
vec3 sphere_normal(in vec3 intersect, in Sphere sphere) {
	return normalize(intersect - sphere.center);
} 

//Get the 3d point that is depth along the ray
vec3 intersection_point(in Ray ray, in float depth) {
	return ray.origin + ray.direction*depth;
}

//Scene Setup and Trace
Hit trace_ray(in Ray ray) {
    //init sphere
	Sphere sphere = Sphere(vec3(0.0),0.4,1.0);
    //init plane
    Plane plane = Plane(vec3(0.0,1.0,0.0),vec3(0.0,-0.4,0.0),2.0);
    //init result
    Hit result = Hit(ray.origin, vec3(0.0), 0.0);
    //sphere check
    float sphere_t = intersect_sphere(ray,sphere);
    //plane check
    float plane_t = intersect_plane(ray,plane);
    float max_t = 8.0;//back cut-off
    float min_t = 0.001; //front cut-off
    
    //Did we hit the Plane
    if (plane_t > min_t && plane_t < max_t) {
    	result.pos = ray.origin + plane_t*ray.direction;
        result.normal = plane.normal;
        result.mat = 2.0;
    }
    //Did we hit the Sphere
    if (sphere_t > min_t && sphere_t < max_t){
    	result.pos = ray.origin + sphere_t*ray.direction;
        result.normal = sphere_normal(result.pos,sphere);
        result.mat = 1.0;
    }
    
    return result;
}

//geometric attenuation (or shadow factor)
float geometric_attenuation(float roughness, float normal_look_angle, float normal_light_angle)
{
	float r2 = roughness * roughness;
	float gv = normal_light_angle * sqrt(normal_look_angle * (normal_look_angle - normal_look_angle * r2) + r2);
	float gl = normal_look_angle * sqrt(normal_light_angle* (normal_light_angle - normal_light_angle * r2) + r2);
	return 0.5 / max(gv + gl, 0.00001);
}

//microfacets (minute roghness in the surface)
float microfacet_distribution(float roughness, float normal_half_angle){
	float r2 = roughness * roughness;
	float d = (normal_half_angle * r2 - normal_half_angle) * normal_half_angle + 1.0;
	return r2 / (d * d * PI);
}

//Fresnel Reflection coefficient (vector)
vec3 fresnel_vec(vec3 specular_color,float look_light_angle) {
	return specular_color + (1.0 - specular_color) * pow((1.0 - look_light_angle),5.0);
}

//Fresnel Reflection coefficient (scalar)
float fresnel_scalar(float f0, float f90, float look_half_angle) {
    return f0 + (f90 - f0) * pow(1.0 - look_half_angle, 5.0);
}

float Burley(float linearRoughness, float normal_look_vector, float normal_light_angle, float light_half_angle) {
    // Burley 2012, "Physically-Based Shading at Disney"
    float f90 = 0.5 + 2.0 * linearRoughness * light_half_angle * light_half_angle;
    float lightScatter = fresnel_scalar(1.0, f90, normal_light_angle);
    float viewScatter  = fresnel_scalar(1.0, f90, normal_look_vector);
    return lightScatter * viewScatter * (1.0 / PI);
}

vec3 spherical_harmonics(const vec3 n) {
    // Irradiance from "Ditch River" IBL (http://www.hdrlabs.com/sibl/archive.html)
    return max(
          vec3( 0.754554516862612,  0.748542953903366,  0.790921515418539)
        + vec3(-0.083856548007422,  0.092533500963210,  0.322764661032516) * (n.y)
        + vec3( 0.308152705331738,  0.366796330467391,  0.466698181299906) * (n.z)
        + vec3(-0.188884931542396, -0.277402551592231, -0.377844212327557) * (n.x)
        , 0.0);
}

vec2 dfg_karis(float roughness, float normal_look_angle) {
    // Karis 2014, "Physically Based Material on Mobile"
    const vec4 c0 = vec4(-1.0, -0.0275, -0.572,  0.022);
    const vec4 c1 = vec4( 1.0,  0.0425,  1.040, -0.040);

    vec4 r = roughness * c0 + c1;
    float a004 = min(r.x * r.x, exp2(-9.28 * normal_look_angle)) * r.x + r.y;

    return vec2(-1.04, 1.04) * a004 + r.zw;
}

void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
    
//Camera + Ray Setup
//----------------------------------------------------------------------
    // camera movement	
	float an = 0.5*(iTime-10.0);
	vec3 ray_origin = vec3( 1.25*cos(an), 0.4, 1.25*sin(an) );
    vec3 origin = vec3( 0.0, 0.0, 0.0 );
    // camera matrix (for ease of animation)
    vec3 ww = normalize( origin - ray_origin );
    vec3 uu = normalize( cross(ww,vec3(0.0,1.0,0.0) ) );
    vec3 vv = normalize( cross(uu,ww));

    
    //initialize total color
    vec3 total = vec3(0.0);
    
 	//what pixel are we marching through
    vec2 p = (-iResolution.xy + 2.0*fragCoord)/iResolution.y;
	// create view ray
    vec3 ray_direction = normalize( p.x*uu + p.y*vv + 1.5*ww );
    
    Ray ray = Ray(ray_origin, ray_direction);
    
//Render Fragment
//----------------------------------------------------------------------
    
    // init "sky" color
    vec3 color = vec3(0.65, 0.85, 1.0) + ray.direction.y * 0.8;

    // raytrace
    Hit result = trace_ray(ray);

    vec3 light_pos = vec3(10.0);
    vec3 light_dir = normalize(result.pos - light_pos);
    vec3 look = -ray.direction;//vector to camera
    
    if (result.mat > 0.999){//hit someting
       
        vec3 half_vec = normalize(look - light_dir);
        
        //important angles
        float normal_look_angle = clamp(dot(result.normal, look),0.0,1.0);
        float normal_light_angle = clamp(dot(result.normal, normalize(light_pos)), 0.0,1.0);
        float look_light_angle = clamp(dot(look, normalize(light_pos)), 0.0,1.0);
        float normal_half_angle = clamp(dot(result.normal, half_vec), 0.0,1.0);
        float look_half_angle = clamp(dot(look,half_vec), 0.0,1.0);
        float light_half_angle = clamp(dot(normalize(light_pos),half_vec), 0.0,1.0);
        
        //material constants (play with these)
        float metallic = 0.0; 
        float reflect_intensity = 1.0;
        float specular_intensity = 2.5;
        float roughness = 0.0;
   		
        vec3 base_color = vec3(0.0);
        //shadow check ray
        Ray shadow_ray = Ray(result.pos+0.0001*light_pos, normalize(light_pos));
       	//Ray Trace shadow
        Hit shadow = trace_ray(shadow_ray);
            
        if (result.mat > 1.999) {//plane (play with theses values)
            //checkerboard
            base_color = 0.4 + mod(floor(6.0 * result.pos.z) + floor(6.0 * result.pos.x), 2.0)*vec3(0.5);
            roughness = 0.1;//play with this
        }else{//sphere (play with these values)
        	base_color = vec3(0.3,0.0,0.3);//sphere color
            roughness = 0.3;//play with this
        }
        
        
        float linear_roughness = roughness*roughness;
        //init specular color
        vec3 specular_initial = 0.04 * (1.0 - metallic) + base_color*metallic;
        //init diffuse color
        vec3 diffuse_initial = (1.0 - metallic) * base_color;
        // Cook-Torrance
        vec3 specular = (microfacet_distribution(linear_roughness,normal_half_angle) 
            		* geometric_attenuation(linear_roughness, normal_look_angle, normal_light_angle))
            		* fresnel_vec(specular_initial,light_half_angle); 
       	//This is the wierd one (lots of different solutions dpending on what you read)
        vec3 diffuse = diffuse_initial * Burley(linear_roughness, normal_look_angle, normal_light_angle, light_half_angle);
        
        //combine
        color = diffuse + specular;

        //alter combo by shadows and light angle
        color *= (specular_intensity * clamp( 1.0 - shadow.mat, 0.0, 1.0) * normal_light_angle);
        //Reflection Check
        vec3 ref_dir = reflect(ray.direction, result.normal);
       	Ray reflected_ray = Ray(result.pos + 0.0001*ref_dir,ref_dir);
        Hit reflected = trace_ray(reflected_ray);
        
        
        //reflected Diffuse calculation
        vec3 reflected_diffuse = spherical_harmonics(result.normal) * (1.0/PI);
        //reflected Specular initial
        vec3 reflected_specular = vec3(0.65, 0.85, 1.0) + reflected_ray.direction.y * 0.8;
        //what did the reflect hit?
        if (reflected.mat > 0.999) {
            if (reflected.mat > 1.999) {
                //reflected onto the gorund
            	reflected_specular = 0.4 + mod(floor(6.0 * reflected.pos.z) + floor(6.0 * reflected.pos.x), 2.0)*vec3(0.5);
            }else{
                //reflected onto the sphere
            	reflected_specular = vec3(0.3,0.0,0.3);
            }
        }
        
        //how to combine the diffuse and specular reflections
        vec2 dfg = dfg_karis(roughness, normal_look_angle);
        vec3 spec_color = specular_initial * dfg.x + dfg.y;
        vec3 reflected_combo = diffuse_initial * reflected_diffuse + reflected_specular * spec_color; 
        //combine 1st and second bounces
        color += reflected_combo*reflect_intensity;
        
    }

    // gamma color calculation    
    color = pow(color, vec3(1.0/2.2));
	total += color;

	fragColor = vec4( total, 1.0 );
}