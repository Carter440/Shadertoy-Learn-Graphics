//Carter S. Jan 2020
//Basic Raymarch of a Pond
//



//Cubic smooth minimum union function from user TinyTexel
float sminCubic( float a, float b, float k )
{
    float h = max( k-abs(a-b), 0.0 )/k;
    return min( a, b ) - h*h*h*k*(1.0/6.0);
}

//distance to plane
float sdPlane( vec3 p, vec4 n )
{
  return dot(p,n.xyz) + n.w;
}

//Plane but with pebble heightmap
float sdTerrain(vec3 p, vec4 n)
{
	float to_plane = sdPlane(p,n);
    float to_pebble = texture(iChannel1,p.xz).x*0.2;//play with pebble max height
    return to_plane - to_pebble;
}

//This function grows with more objects and operations (unions, distortions, perturbations, ect)
//This is usually where acceleration structures and ad hoc hackery goes down
//x  index is distance, y index is material type (sometimes other meta info)
vec2 map_the_world(in vec3 p)
{
    
	//Plane is represented as a vec4 using ax+by+cz+w = 0 formulation
    float to_ground = sdPlane(p, normalize(vec4(0.0,1.0,0.0,0.3)));
    float to_rock = sdTerrain(p, normalize(vec4(0.0,1.0,0.0,0.3)));
    float to_water = abs(sdPlane(p, normalize(vec4(0.0,1.0,0.0,0.0))));
    if (to_water < to_rock) {//early quit since we expect to be closest to water often
        return vec2(to_water,2.0);
    }
    //Rocks at the bottom of the pond
    float pebble_start = 0.45;//play with this range(0.0,1.0)
    float mat = 0.0;
    float height = texture(iChannel1, p.xz*0.15).x;
    if (height > pebble_start){//using pebbles to decide where pebbles are lol (play with numbers)
        //change mat
        float prop = height-pebble_start;
        //nonlinear interp between ground and rocks to make sure it looks like they touch (rocks dont get cut off) 
        to_ground = mix(to_ground,to_rock,1.0 - (1.0/pow(prop+1.0,8.0)));
    	mat = 1.0;
    }
    
    return vec2(to_ground,mat);
}


//Find the normal of the surface at this point P
vec3 calculate_normal( in vec3 pos)
{
    vec2 e = vec2(1.0,-1.0)*0.5773;
    const float eps = 0.0005;
    return normalize( e.xyy*map_the_world( pos + e.xyy ).x + 
					  e.yyx*map_the_world( pos + e.yyx ).x + 
					  e.yxy*map_the_world( pos + e.yxy ).x + 
					  e.xxx*map_the_world( pos + e.xxx ).x );  
}

vec2 march_ray(vec3 ray_origin, vec3 ray_direction, float tmax) {
	float t = 0.0;//current depth
    float m = 0.0;
    for( int i=0; i<256; i++ )
    {
        vec3 pos = ray_origin + t*ray_direction;
        //get dist to nearest surface
        vec2 h = map_the_world(pos);
        m = h.y;
        //if we hit something break
        if( h.x<0.0001 || t>tmax ) return vec2(t,m);
        //step forward
        t += h.x;
    }
    return vec2(t,m);
}


void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
    // camera movement	
	float an = 0.5*(iTime-10.0);
	vec3 ray_origin = vec3( 1.0*cos(an), 0.4, 1.0*sin(an) );
    vec3 origin = vec3( 0.0, 0.0, 0.0 );
    // camera matrix (for ease of animation)
    vec3 ww = normalize( origin - ray_origin );
    vec3 uu = normalize( cross(ww,vec3(0.0,1.0,0.0) ) );
    vec3 vv = normalize( cross(uu,ww));

    
    //initialize color
    vec3 total = vec3(0.0);
    
 	//what pixel are we marching through
    vec2 p = (-iResolution.xy + 2.0*fragCoord)/iResolution.y;


	// create view ray
    vec3 ray_direction = normalize( p.x*uu + p.y*vv + 1.5*ww );
    

    // raymarch
    const float tmax = 4.0; //max march depth
    vec2 res = march_ray(ray_origin,ray_direction,tmax);
    float t = res.x;
    
     // ambient + diffuse light color calculations
     vec3 color = vec3(0.0);
     if( t<tmax )
     {//we hit something
        vec3 pos = ray_origin + t*ray_direction;
        //break up the surface normal
        vec3 normal = calculate_normal(pos) + vec3(0.2*texture(iChannel3,1.0*pos.xz));//play with values
        //get the refracted ray direction
        vec3 ref_dir = refract(ray_direction, normal, 1.0/1.33);
        vec3 refract_color = vec3(0.0);
        vec3 water_color = vec3(0.0,0.3,0.4);
        vec3 reflect_color = pow(texture(iChannel0, reflect(ray_direction, normal)).rbg, vec3(2.2));
        res = march_ray(pos + ref_dir*0.001, ref_dir, tmax);
        t = res.x;
        float m = res.y;
         
        if( t<tmax )
     	{
            pos = (pos + ref_dir*0.001) + t*ref_dir;
            
        	if(m < 1.0) {//is dirt area
             	refract_color = texture(iChannel2, pos.xz*1.0).rgb;
        	}else{//is rock area
            	float rock_val = texture(iChannel1,pos.xz).x;
            	if (rock_val <0.25){//get some dirt in between rocks (play with this value)
             		refract_color =  texture(iChannel2, pos.xz*1.0).rgb;
            	}else{
                    //rock color (grey whoda thunk it)
         			refract_color = vec3(0.8*rock_val);
            	}
        	}
        }else{
        	refract_color = pow(texture(iChannel0, ref_dir).rgb, vec3(2.2));
        }
        //combine all effects
        color = refract_color*0.4 + water_color*0.25 + reflect_color*0.35;//play with the combo
     }else{//missed pond hit background
     	color = pow(texture(iChannel0, ray_direction).rgb, vec3(2.2));
     }

     // gamma color calculation    
     color = sqrt( color );
	 total += color;

	 fragColor = vec4( total, 1.0 );
}