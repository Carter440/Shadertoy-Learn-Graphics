//Carter S. Feb 2020
//Visual demonstration of several interpolation schemes including linear mix, exp mix, smoothstep (Perlin), and inverse smoothstep.


#define PI 3.14159265359
#define AA 1
#define LOOP_TIME 2.0
#define BALLSIZE 0.4
#define ANIM_RANGE 3.0

//Ray hit struct
struct Hit {
	vec3 pos;
    vec3 normal;
    float mat;
};
   
//ray struct
struct Ray {
	vec3 origin;
    vec3 direction;
};


//geometric attenuation (or shadow factor)
float geometric_attenuation(float roughness, float normal_look_angle, float normal_light_angle)
{
	float r2 = roughness * roughness;
	float gv = normal_light_angle * sqrt(normal_look_angle * (normal_look_angle - normal_look_angle * r2) + r2);
	float gl = normal_look_angle * sqrt(normal_light_angle* (normal_light_angle - normal_light_angle * r2) + r2);
	return 0.5 / max(gv + gl, 0.00001);
}

//microfacets (minute roghness in the surface)
float microfacet_distribution(float roughness, float normal_half_angle){
	float r2 = roughness * roughness;
	float d = (normal_half_angle * r2 - normal_half_angle) * normal_half_angle + 1.0;
	return r2 / (d * d * PI);
}

//Fresnel Reflection coefficient (vector)
vec3 fresnel_vec(vec3 specular_color,float look_light_angle) {
	return specular_color + (1.0 - specular_color) * pow((1.0 - look_light_angle),5.0);
}

//Fresnel Reflection coefficient (scalar)
float fresnel_scalar(float f0, float f90, float look_half_angle) {
    return f0 + (f90 - f0) * pow(1.0 - look_half_angle, 5.0);
}

float Burley(float linearRoughness, float normal_look_vector, float normal_light_angle, float light_half_angle) {
    // Burley 2012, "Physically-Based Shading at Disney"
    float f90 = 0.5 + 2.0 * linearRoughness * light_half_angle * light_half_angle;
    float lightScatter = fresnel_scalar(1.0, f90, normal_light_angle);
    float viewScatter  = fresnel_scalar(1.0, f90, normal_look_vector);
    return lightScatter * viewScatter * (1.0 / PI);
}

vec3 spherical_harmonics(const vec3 n) {
    // Irradiance from "Ditch River" IBL (http://www.hdrlabs.com/sibl/archive.html)
    return max(
          vec3( 0.754554516862612,  0.748542953903366,  0.790921515418539)
        + vec3(-0.083856548007422,  0.092533500963210,  0.322764661032516) * (n.y)
        + vec3( 0.308152705331738,  0.366796330467391,  0.466698181299906) * (n.z)
        + vec3(-0.188884931542396, -0.277402551592231, -0.377844212327557) * (n.x)
        , 0.0);
}

vec2 dfg_karis(float roughness, float normal_look_angle) {
    // Karis 2014, "Physically Based Material on Mobile"
    const vec4 c0 = vec4(-1.0, -0.0275, -0.572,  0.022);
    const vec4 c1 = vec4( 1.0,  0.0425,  1.040, -0.040);

    vec4 r = roughness * c0 + c1;
    float a004 = min(r.x * r.x, exp2(-9.28 * normal_look_angle)) * r.x + r.y;

    return vec2(-1.04, 1.04) * a004 + r.zw;
}

//From IQ ellipsoid approximation
float sdEllipsoid( vec3 p, vec3 r )
{
  float k0 = length(p/r);
  float k1 = length(p/(r*r));
  return k0*(k0-1.0)/k1;
}

float sdSphere(vec3 pos, vec3 c, float r) {
	return length(pos - c) - r;
}

//distance to plane
float sdPlane( vec3 p, vec4 n )
{
  return dot(p,n.xyz) + n.w;
}

//Interpolation code
//-------------------------------------------------------------------------------------
//analytic inverse smoothstep
float invsmoothstep(float a, float b, float i) {
	i = clamp(i,0.0,1.0);
    return mix(a,b,0.5 - sin(asin(1.0 - 2.0*i)/3.0)); 
}


//Ken Perlin's smootherstep
//similar to smoothstep() but higher exponent and 0 1st and 2nd derivatives
float smootherstep(float a, float b, float i) {
    i = clamp(i,0.0,1.0);
    return mix(a,b,i*i*i*(i*(i * 6.0 - 15.0) + 10.0));
    
}

float expmix(float a, float b, float i , float ex) {
	i = clamp(i,0.0,1.0);
    return mix(a,b,pow(i,ex));
}
//-------------------------------------------------------------------------------------

//This function grows with more objects and operations (unions, distortions, perturbations, ect)
//This is usually where acceleration structures and ad hoc hackery goes down
//x  index is distance, y index is material type (sometimes other meta info)
vec2 map_the_world(in vec3 p)
{
    float time = mod(iTime, LOOP_TIME);
    vec3 center0 = vec3(mix(-ANIM_RANGE,ANIM_RANGE,time/LOOP_TIME),0.0,0.0);
    vec3 center1 = vec3(expmix(-ANIM_RANGE,ANIM_RANGE,time/LOOP_TIME, 2.0),1.0,0.0);
    vec3 centern1 = vec3(expmix(ANIM_RANGE,-ANIM_RANGE, 1.0 - time/LOOP_TIME, 2.0),-1.0,0.0);
    vec3 center2 = vec3(smootherstep(-ANIM_RANGE,ANIM_RANGE,time/LOOP_TIME),2.0,0.0);
    vec3 centern2 = vec3(invsmoothstep(-ANIM_RANGE,ANIM_RANGE,time/LOOP_TIME),-2.0,0.0);
    
    
    float to_sphere = sdSphere(p, center0 ,BALLSIZE);
    to_sphere = min(to_sphere,sdSphere(p, center1 ,BALLSIZE));
    to_sphere = min(to_sphere,sdSphere(p, centern1 ,BALLSIZE));
    to_sphere = min(to_sphere,sdSphere(p, center2 ,BALLSIZE));
    to_sphere = min(to_sphere,sdSphere(p, centern2 ,BALLSIZE));

    return vec2(to_sphere, 1.0);


}


//Find the normal of the surface at this point P
vec3 calculate_normal( in vec3 pos)
{
    vec2 e = vec2(1.0,-1.0)*0.5773*0.0005;
    const float eps = 0.0005;
    return normalize( e.xyy*map_the_world( pos + e.xyy ).x + 
					  e.yyx*map_the_world( pos + e.yyx ).x + 
					  e.yxy*map_the_world( pos + e.yxy ).x + 
					  e.xxx*map_the_world( pos + e.xxx ).x );  
}

//PB Rendering Code
//-------------------------------------------------------------------------------------
//Basic RayMarch
Hit march_ray(Ray ray, float tmax) {
	float t = 0.0;//current depth
    float m = 0.0;
    vec3 pos = vec3(0.0);
    for( int i=0; i<256; i++ )
    {
        pos = ray.origin + t*ray.direction;
        //get dist to nearest surface
        vec2 h = map_the_world(pos);
        m = h.y;
        //if we hit something break
        if( h.x<0.0001) break;
        if( t > tmax){m = 0.0; break;}
        //step forward
        t += h.x*0.9;
    }
    return Hit(pos, calculate_normal(pos), m);
}

vec3 render_ray(Ray ray) {
	// init "sky" color
    vec3 color = vec3(0.5, 0.8, 1.0) * (1.0 + ray.direction.y) * 0.8;

    // raytrace
    Hit result = march_ray(ray,8.0);

    vec3 light_pos = vec3(10.0);
    vec3 light_dir = normalize(result.pos - light_pos);
    vec3 look = -ray.direction;//vector to camera
    
    if (result.mat > 0.999){//hit someting
       
        vec3 half_vec = normalize(look - light_dir);
        
        //important angles
        float normal_look_angle = clamp(dot(result.normal, look),0.0,1.0);
        float normal_light_angle = clamp(dot(result.normal, normalize(light_pos)), 0.0,1.0);
        float look_light_angle = clamp(dot(look, normalize(light_pos)), 0.0,1.0);
        float normal_half_angle = clamp(dot(result.normal, half_vec), 0.0,1.0);
        float look_half_angle = clamp(dot(look,half_vec), 0.0,1.0);
        float light_half_angle = clamp(dot(normalize(light_pos),half_vec), 0.0,1.0);
        
        //material constants (play with these)
        float metallic = 0.0; 
        float reflect_intensity = 1.0;
        float specular_intensity = 2.5;
        float roughness = 0.0;
   		
        vec3 base_color = vec3(0.0);
        //shadow check ray
        Ray shadow_ray = Ray(result.pos+0.01*light_pos, normalize(light_pos));
       	//Ray Trace shadow
        Hit shadow = march_ray(shadow_ray, 8.0);
            
        if (result.mat > 1.999) {//plane (play with theses values)
            //checkerboard
            base_color = 0.4 + mod(floor(6.0 * result.pos.z) + floor(6.0 * result.pos.x), 2.0)*vec3(0.5);
            roughness = 0.1;//play with this
        }else{//sphere (play with these values)
        	base_color = vec3(0.2,0.2,0.2);//sphere color
            roughness = 0.3;//play with this
        }
        
        
        
        float linear_roughness = roughness*roughness;
        //init specular color
        vec3 specular_initial = 0.04 * (1.0 - metallic) + base_color*metallic;
        //init diffuse color
        vec3 diffuse_initial = (1.0 - metallic) * base_color;
        // Cook-Torrance
        vec3 specular = (microfacet_distribution(linear_roughness,normal_half_angle) 
            		* geometric_attenuation(linear_roughness, normal_look_angle, normal_light_angle))
            		* fresnel_vec(specular_initial,light_half_angle); 
       	//This is the wierd one (lots of different solutions dpending on what you read)
        vec3 diffuse = diffuse_initial * Burley(linear_roughness, normal_look_angle, normal_light_angle, light_half_angle);
        
        //combine
        color = diffuse + specular;

        //alter combo by shadows and light angle
        color *= (specular_intensity * clamp( 1.0 - shadow.mat, 0.0, 1.0) * normal_light_angle);
        //Reflection Check
        vec3 ref_dir = reflect(ray.direction, result.normal);
       	Ray reflected_ray = Ray(result.pos + 0.03*ref_dir,ref_dir);
        Hit reflected = march_ray(reflected_ray,8.0);
        
        
        //reflected Diffuse calculation
        vec3 reflected_diffuse = spherical_harmonics(result.normal) * (1.0/PI);
        //reflected Specular initial
        vec3 reflected_specular = vec3(0.65, 0.85, 1.0) + reflected_ray.direction.y * 0.8;
        //what did the reflect hit?
        if (reflected.mat > 0.999) {
            if (reflected.mat > 1.999) {
                //reflected onto the gorund
            	reflected_specular = 0.4 + mod(floor(6.0 * reflected.pos.z) + floor(6.0 * reflected.pos.x), 2.0)*vec3(0.5);
            }else{
                //reflected onto the sphere
            	reflected_specular = vec3(0.2,0.2,0.2);
            }
        }
        
        //how to combine the diffuse and specular reflections
        vec2 dfg = dfg_karis(roughness, normal_look_angle);
        vec3 spec_color = specular_initial * dfg.x + dfg.y;
        vec3 reflected_combo = diffuse_initial * reflected_diffuse + reflected_specular * spec_color; 
        //combine 1st and second bounces
        color += reflected_combo*reflect_intensity;
        
    }

    // gamma color calculation    
    return color;
}

//-------------------------------------------------------------------------------------
void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
    
//Camera + Ray Setup
//----------------------------------------------------------------------
    // camera movement	
	float an = 0.5*(PI);
	vec3 ray_origin = vec3( 3.0*cos(an), 0.4, 3.0*sin(an) );
    vec3 origin = vec3( 0.0, 0.0, 0.0 );
    // camera matrix (for ease of animation)
    vec3 ww = normalize( origin - ray_origin );
    vec3 uu = normalize( cross(ww,vec3(0.0,1.0,0.0) ) );
    vec3 vv = normalize( cross(uu,ww));

    
    //initialize total color
    vec3 total = vec3(0.0);
    
    #if AA>1
    for( int m=0; m<AA; m++ )
    for( int n=0; n<AA; n++ )
    {
    vec2 o = vec2(float(m),float(n)) / float(AA) - 0.5;
    vec2 p = (-iResolution.xy + 2.0*(fragCoord+o))/iResolution.y;
    #else  
 	//what pixel are we marching through
    vec2 p = (-iResolution.xy + 2.0*fragCoord)/iResolution.y;
    #endif
	// create view ray
    vec3 ray_direction = normalize( p.x*uu + p.y*vv + 1.0*ww );
    
    Ray ray = Ray(ray_origin, ray_direction);
    
//Render Fragment
//----------------------------------------------------------------------
    
	total += render_ray(ray);
        
    #if AA>1
    }
    total /= float(AA*AA);
    #endif

    total = pow(total, vec3(1.0/2.2));
    
	fragColor = vec4( total, 1.0 );
}